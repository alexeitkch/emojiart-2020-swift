//
//  EmojiArtDocument.swift
//  EmojiArt
//
//  Created by Aleksey on 9/4/23.
//

import SwiftUI

//ViewModel –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
class EmojiArtDocument: ObservableObject {
    
    static let palette: String = "‚≠êÔ∏èüå®üçéü•®‚öæÔ∏è"
    
    //–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ –∏–≥—Ä—ã
    //@Published
    private var emojiArt: EmojiArt {
        willSet {
            objectWillChange.send()
        }
        didSet {
            print("json = \(emojiArt.json?.utf8 ?? "nil")")
            UserDefaults.standard.set(emojiArt.json, forKey: EmojiArtDocument.untitled)
        }
    }
    
    private static let untitled = "EmojiArtDocument.Untitled"
    
    init() {
        emojiArt = EmojiArt(json: UserDefaults.standard.data(forKey: EmojiArtDocument.untitled)) ?? EmojiArt()
        fetchBackgroundImageData()
    }
    
    //–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å—Å—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –º–µ—Ç–æ–¥–æ–º drag_and_drop
    @Published private(set) var backgroundImage: UIImage?
    
    //–º–∞—Å—Å–∏–≤ —ç–º–æ–¥–∂–∏ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã
    var emojis: [EmojiArt.Emoji] { emojiArt.emojis }
    
    //MARK: - Intent(s)
    //–º–µ—Ç–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏
    
    //–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —ç–º–æ–¥–∂–∏
    func addEmoji(_ emoji: String, at location: CGPoint, size: CGFloat) {
        emojiArt.addEmoji(emoji, x: Int(location.x), y: Int(location.y), size: Int(size))
    }
    
    //–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
    func moveEmoji(_ emoji: EmojiArt.Emoji, by offset: CGSize) {
        if let index = emojiArt.emojis.firstIndex(matching: emoji) {
            emojiArt.emojis[index].x += Int(offset.width)
            emojiArt.emojis[index].y += Int(offset.height)
        }
    }
    
    //–∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    func scaleEmoji(_ emoji: EmojiArt.Emoji, by scale: CGFloat) {
        if let index = emojiArt.emojis.firstIndex(matching: emoji) {
            emojiArt.emojis[index].size = Int((CGFloat(emojiArt.emojis[index].size) * scale).rounded(.toNearestOrEven))
        }
    }
    
    func setBackgroundURL(_ url: URL?) {
        emojiArt.backgroundURL = url?.imageURL
        fetchBackgroundImageData()
    }
    
    private func fetchBackgroundImageData() {
        backgroundImage = nil
        if let url = self.emojiArt.backgroundURL {
            //–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
            DispatchQueue.global(qos: .userInitiated).async {
                //–ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É
                if let imageData = try? Data(contentsOf: url) {
                    //–µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–∞–ª–∞–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ —Ñ–æ–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    DispatchQueue.main.async {
                        if url == self.emojiArt.backgroundURL {
                            self.backgroundImage = UIImage(data: imageData)
                        }
                    }
                }
            }
        }
    }
}

extension EmojiArt.Emoji {
    var fontSize: CGFloat { CGFloat(self.size) }
    var location: CGPoint { CGPoint(x: CGFloat(x), y: CGFloat(y)) }
}
